// compass libraries
@import "compass/css3";
// defaults & vars
@function map($map, $keys...) { // to access multi-maps aka vars with arrays in several deepness
  $value: $map;
  @each $key in $keys {
    $value: map-get($value, $key);
  }
  @return $value;
}

@mixin col($i, $cols: $columns) {
	// -ms-flex-preferred-size: percentage($i/$cols);
	// flex: 0 0 percentage($i/$cols);
	flex-basis: percentage($i/$cols);
	max-width: percentage($i/$cols);
}
//#########################################

$columns: 12;

$breakpoints: (
		xs: 			20rem,
		s:				30rem,
		m:				48rem,
		l:				62rem,
		xl:				86rem
);

$names: (
	grid-class: 		"grid",
	column-class: 		"col",
	prefix-grid-attr:	"grid-",
	prefix-item-attr:	"item-",
	flex-wrap: 			"wrap",
	flex-nowrap: 		"nowrap",
	jc-center:			"center",
	jc-start:			"start",
	jc-end:				"end",
	jc-between:			"between",
	jc-around:			"around",
	fd-row: 			"row",
	fd-row-rev: 		"row-rev",
	fd-column: 			"column",
	fd-column-rev: 		"column-rev",
	item-stretch: 		"stretch",
	item-start: 		"top",
	item-end: 			"bottom",
	item-center: 		"middle",
	prefix-padding: 	"padding-",
);
//#########################################
// default classes

.margin {
	margin: 1em;
}

.margin-bottom {
	margin-bottom: 1em;
}

.margin-left {
	margin-left: 1em;
}

.margin-right {
	margin-right: 1em;
}

.no-margin.no-margin.no-margin {
	margin: 0;
}

.no-padding.no-padding.no-padding {
	padding: 0;
}

.padding {
	padding: 1em 1em 0 1em;
}

.padding-bottom {
	padding-bottom: 1em;
}

.padding-left {
	padding-left: 1em;
}

.padding-right {
	padding-right: 1em;
}

.list-inline {
	>li {
		display: inline-block;
	}
}
.align-center {
	text-align: center;
}

.align-right {
	text-align: right;
}

.#{map($names, grid-class)} {
	display: flex;
	flex-wrap: wrap;

	> .#{map($names, grid-class)} {
		display: inline-flex;
	}

	&.#{map($names, prefix-grid-attr)}#{map($names, flex-wrap)} {
		flex-wrap: wrap;
	}

	&.#{map($names, prefix-grid-attr)}#{map($names, flex-nowrap)} {
		flex-wrap: nowrap;
	}

	&.#{map($names, prefix-grid-attr)}#{map($names, jc-center)} {
		justify-content: center;
	}

	&.#{map($names, prefix-grid-attr)}#{map($names, jc-start)} {
		justify-content: flex-start;
	}

	&.#{map($names, prefix-grid-attr)}#{map($names, jc-end)} {
		justify-content: flex-end;
	}

	&.#{map($names, prefix-grid-attr)}#{map($names, jc-between)} {
		justify-content: space-between;
	}

	&.#{map($names, prefix-grid-attr)}#{map($names, jc-around)} {
		justify-content: space-around;
	}

	&.#{map($names, prefix-grid-attr)}#{map($names, fd-row)} {
		flex-direction: row;
	}

	&.#{map($names, prefix-grid-attr)}#{map($names, fd-row-rev)} {
		flex-direction: row;
	}

	&.#{map($names, prefix-grid-attr)}#{map($names, fd-column)} {
		flex-direction: column;
	}

	&.#{map($names, prefix-grid-attr)}#{map($names, fd-column-rev)} {
		flex-direction: column-reverse;
	}

	&.#{map($names, item-stretch)} {
		align-items: stretch;
	}

	&.#{map($names, item-start)} {
		align-items: flex-start;
	}

	&.#{map($names, item-end)} {
		align-items: flex-end;
	}

	&.#{map($names, item-center)} {
		align-items: center;
	}

	> .#{map($names, prefix-item-attr)}#{map($names, item-stretch)} {
		align-self: stretch;
	}

	> .#{map($names, prefix-item-attr)}#{map($names, item-start)} {
		align-self: flex-start;
	}

	> .#{map($names, prefix-item-attr)}#{map($names, item-end)} {
		align-self: flex-end;
	}

	> .#{map($names, prefix-item-attr)}#{map($names, item-center)} {
		align-self: center;
	}
}

[class^="#{map($names, column-class)}-"] {
	display: inline-block;
	float: left;
	padding: 0 1em;
	flex: 0 0 100%;
	flex-basis: 100%;
	flex-grow: 0;
	flex-shrink: 0;
}

 }

@each $name, $bp in $breakpoints {
	@media (min-width: $bp) {
		.#{map($names, column-class)}-#{$name}-hide {
			display: none;
		}

		.#{map($names, prefix-padding)}#{$name} {
			padding: 1rem;
		}

		.#{map($names, prefix-padding)}#{$name}-bottom {
			padding-bottom: 1rem;
		}

		.#{map($names, prefix-padding)}#{$name}-none {
			padding: 0;
		}

		@for $i from 1 through $columns {

			.#{map($names, column-class)}-#{$name}-#{$i} {
				@include col($i);
				display: inline-block;

				@if $i == $columns {
					padding: 0 0 1em;
				} @else {
					// padding: initial;
				}
			}
		}
	}
}
